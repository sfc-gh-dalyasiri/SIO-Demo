---
description: Streamlit application development standards and patterns
alwaysApply: false
---
# Streamlit Development Rules

## Multi-File Architecture
- Main entry point: `streamlit_app.py`
- Utility modules: `utils/data_loader.py`, `utils/charts.py`
- Demonstrate that Streamlit apps can import from multiple files
- One main file selected in Snowsight, but can use unlimited supporting files

## Dependency Management
- Core dependencies in `requirements.txt`: streamlit, pandas, numpy, snowflake-connector-python
- Optional dependencies (like plotly) should have graceful fallbacks
- Use try/except for optional imports with Streamlit built-in chart alternatives

## Chart Fallback Strategy
- Primary: Use plotly for enhanced visualizations when available
- Always provide meaningful alternatives when dependencies unavailable
- **CRITICAL**: Plotly renders incorrectly in hosted Snowflake Streamlit (SIS) - use native charts in SIS

## Import Pattern for Optional Dependencies

**For SIS Compatibility** - Plotly has rendering issues in hosted environment:

```python
try:
    import plotly.express as px
    import plotly.graph_objects as go
    
    # Detect SIS environment
    try:
        from snowflake.snowpark.context import get_active_session
        # In SIS - use native Streamlit charts (Plotly renders incorrectly)
        PLOTLY_AVAILABLE = False
    except:
        # Local - use Plotly for enhanced visualizations
        PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False
    st.warning("Plotly not available. Using Streamlit built-in charts.")
```

**Why**: Plotly charts in SIS show incorrect data (often linear index instead of values)

## Error Handling Patterns
- Always use try/except for optional dependencies
- Provide meaningful fallbacks for missing packages
- Log warnings for missing features, not errors
- Use Streamlit's built-in connection management when possible

## Snowflake Connection Pattern (Local vs Hosted)

**CRITICAL**: Streamlit connection differs between local and hosted Snowflake environments.

```python
# CORRECT - Works in both local and hosted
@st.cache_resource
def init_connection():
    """Initialize Snowflake connection - works for both local and hosted"""
    try:
        # Try hosted Snowflake Streamlit first
        from snowflake.snowpark.context import get_active_session
        return get_active_session()
    except:
        # Fall back to local development with st.connection
        return st.connection("snowflake")

def get_data(query):
    """Execute query and return results"""
    try:
        session = init_connection()
        # Check if it's Snowpark session (hosted) or connection object (local)
        if hasattr(session, 'sql'):
            # Hosted Snowflake Streamlit (Snowpark session)
            df = session.sql(query).to_pandas()
            # Reset index to avoid chart rendering issues
            return df.reset_index(drop=True)
        else:
            # Local development (connection object)
            df = session.query(query)
            return df.reset_index(drop=True)
    except Exception as e:
        st.error(f"Error executing query: {str(e)}")
        return pd.DataFrame()
```

**Important additions:**
- `.reset_index(drop=True)` prevents charts from using dataframe index instead of values
- Removed `ttl=60` from query - use `@st.cache_data` decorator instead if needed

**Why this matters:**
- Local: Uses `st.connection("snowflake")` with secrets.toml
- Hosted: Uses `get_active_session()` from snowflake.snowpark.context
- This pattern works in BOTH environments seamlessly

## Page Configuration
**CRITICAL**: `st.set_page_config()` MUST be the very first Streamlit command.

```python
# CORRECT
import streamlit as st

st.set_page_config(...)  # FIRST!

# Then other imports and code
try:
    import plotly
except:
    st.warning(...)  # OK after set_page_config
```

```python
# WRONG - Will cause error in hosted Streamlit
import streamlit as st

try:
    import plotly
except:
    st.warning(...)  # ERROR! Called before set_page_config

st.set_page_config(...)  # Too late!
```

## AI Summary Optimization


## Tab Persistence and State Management

### Tab Behavior Differences
- **Local Streamlit**: More forgiving with state preservation during reruns
- **Hosted Snowflake Streamlit**: More sensitive to state reset operations
- **Key Issue**: `st.cache_data.clear()` causes tab reset in hosted environment

### Tab Persistence Best Practices
- **Use `st.tabs()` for visual consistency** - maintains beautiful side-by-side appearance
- **Avoid `st.cache_data.clear()` after form submissions** - causes tab jumping in hosted environment
- **Prefer cache TTL over manual clearing** - let Streamlit handle cache expiration naturally
- **Remove `st.rerun()` when possible** - can cause unwanted tab resets

### Form Success Handling Pattern
```python
# GOOD - Shows message immediately, stays in tab
if success:
    st.success("✅ Record updated successfully!")
    st.warning("⏱️ Changes appear within 1 minute due to dynamic table refresh.")

# BAD - Causes tab reset in hosted environment  
if success:
    st.cache_data.clear()  # ← Avoid this!
    st.session_state.success = True
    st.rerun()  # ← Avoid this!
```

### Environment-Specific Behavior
- Test tab persistence in **both local and hosted** environments
- Hosted Streamlit is more strict about state management
- What works locally may reset tabs online

## Testing and Error Checking

### Proper App Testing Protocol
- **ALWAYS run the app properly** with `streamlit run streamlit_app.py`
- **Check for actual errors** by monitoring terminal output
- **Verify app accessibility** with HTTP status check
- **NEVER use unnecessary commands** like `sleep 5 && echo "message"`

### Error Checking Best Practices
```bash
# GOOD - Proper testing approach
streamlit run streamlit_app.py &
curl -s -o /dev/null -w "%{http_code}" http://localhost:8501

# BAD - Wastes time and doesn't check real status  
sleep 5 && echo "App should be running"
```

### When Errors Occur
- **Read the actual error messages** from terminal output
- **Fix the root cause** rather than masking with delays
- **Test immediately** after each fix
- **Verify functionality** before proceeding

## Compatibility Differences: Local vs Hosted Streamlit

### API Differences

**Features NOT available in hosted Snowflake Streamlit:**

1. **st.column_config** - Does not exist
   ```python
   # ❌ WRONG - Breaks in hosted
   st.dataframe(df, column_config={...})
   
   # ✅ CORRECT - Works everywhere
   df = df.rename(columns={...})
   df['amount'] = pd.to_numeric(df['amount']).round(2)
   st.dataframe(df)
   ```

2. **st.rerun()** - Use fallback
   ```python
   # ✅ CORRECT - Works in both environments
   try:
       st.rerun()
   except AttributeError:
       st.experimental_rerun()
   ```

3. **hide_index parameter** - Does not exist
   ```python
   # ❌ WRONG
   st.dataframe(df, hide_index=True)
   
   # ✅ CORRECT
   st.dataframe(df)
   ```

4. **use_container_width parameter** - Causes deprecation warnings
   ```python
   # ❌ AVOID - Spams warnings
   st.plotly_chart(fig, use_container_width=True)
   
   # ✅ CORRECT
   st.plotly_chart(fig)
   ```

### Data Processing Best Practices

**Always normalize data from Snowflake:**

```python
# Ensure column names are consistent (Snowflake returns uppercase)
df.columns = [col.upper() for col in df.columns]

# Convert to numeric before operations (Snowflake may return object types)
df['numeric_col'] = pd.to_numeric(df['numeric_col'], errors='coerce').fillna(0)

# Reset index to avoid chart rendering issues
df = df.reset_index(drop=True)
```

### Chart Rendering

**Plotly charts render incorrectly in hosted Streamlit** - shows linear index instead of data

```python
# ✅ BEST PRACTICE - Environment-aware charting
if PLOTLY_AVAILABLE:  # Set to False in hosted environment
    fig = px.line(df, x='date', y='value')
    st.plotly_chart(fig)
else:
    st.line_chart(df.set_index('date')['value'])
```

