-- ============================================================================
-- SIO (Saudi Irrigation Organization) - Database Setup
-- ============================================================================
-- This script creates the complete database infrastructure for the SIO demo
-- Run with: snow sql -f data_engineering/setup_database.sql -c myconnection
-- ============================================================================

USE ROLE ACCOUNTADMIN;

-- ============================================================================
-- 1. CREATE DATABASE
-- ============================================================================

CREATE DATABASE IF NOT EXISTS SIO_DB
    COMMENT = 'Saudi Irrigation Organization - AI-powered irrigation management';

-- ============================================================================
-- 2. CREATE SCHEMAS
-- ============================================================================

CREATE SCHEMA IF NOT EXISTS SIO_DB.DATA
    COMMENT = 'Core operational data (customers, usage, billing)';

CREATE SCHEMA IF NOT EXISTS SIO_DB.ML_ANALYTICS
    COMMENT = 'Machine learning models and analytics';

CREATE SCHEMA IF NOT EXISTS SIO_DB.SEMANTIC_MODELS
    COMMENT = 'Semantic models for Cortex Analyst';

-- ============================================================================
-- 3. CREATE WAREHOUSE
-- ============================================================================

CREATE WAREHOUSE IF NOT EXISTS SIO_MED_WH
    WAREHOUSE_SIZE = MEDIUM
    AUTO_SUSPEND = 300
    AUTO_RESUME = TRUE
    INITIALLY_SUSPENDED = FALSE
    COMMENT = 'Medium warehouse for SIO operations and ML workloads';

USE WAREHOUSE SIO_MED_WH;
USE DATABASE SIO_DB;

-- ============================================================================
-- 4. CREATE TABLES
-- ============================================================================

USE SCHEMA DATA;

-- Regions (Saudi Provinces)
CREATE OR REPLACE TABLE REGIONS (
    REGION_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    REGION_NAME VARCHAR(100) NOT NULL,
    REGION_NAME_AR VARCHAR(100),
    POPULATION NUMBER,
    AGRICULTURAL_AREA_KM2 NUMBER(12,2),
    WATER_CAPACITY_M3 NUMBER(15,2),
    CREATED_DATE DATE DEFAULT CURRENT_DATE()
);

-- Water Sources (Reservoirs, Wells, Treatment Plants)
CREATE OR REPLACE TABLE WATER_SOURCES (
    SOURCE_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    SOURCE_NAME VARCHAR(200) NOT NULL,
    SOURCE_TYPE VARCHAR(50), -- RESERVOIR, WELL, TREATMENT_PLANT
    REGION_ID NUMBER NOT NULL,
    CAPACITY_M3 NUMBER(15,2) NOT NULL,
    CURRENT_LEVEL_M3 NUMBER(15,2),
    EFFICIENCY_PERCENT NUMBER(5,2),
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    LAST_MAINTENANCE_DATE DATE,
    LATITUDE NUMBER(10,7),
    LONGITUDE NUMBER(10,7),
    FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID)
);

-- Customers (Farmers & Agricultural Businesses)
CREATE OR REPLACE TABLE CUSTOMERS (
    CUSTOMER_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(200) NOT NULL,
    CUSTOMER_TYPE VARCHAR(50), -- FARM, AGRICULTURAL_BUSINESS, INDUSTRIAL
    REGION_ID NUMBER NOT NULL,
    FARM_SIZE_HECTARES NUMBER(10,2),
    CROP_TYPE VARCHAR(100),
    CONTACT_PHONE VARCHAR(20),
    CONTACT_EMAIL VARCHAR(100),
    REGISTRATION_DATE DATE DEFAULT CURRENT_DATE(),
    ACCOUNT_STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID)
);

-- Water Meters
CREATE OR REPLACE TABLE WATER_METERS (
    METER_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    METER_NUMBER VARCHAR(50) UNIQUE NOT NULL,
    INSTALLATION_DATE DATE NOT NULL,
    LAST_CALIBRATION_DATE DATE,
    METER_STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    LOCATION_LATITUDE NUMBER(10,7),
    LOCATION_LONGITUDE NUMBER(10,7),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

-- Water Usage (Daily Readings)
CREATE OR REPLACE TABLE WATER_USAGE (
    READING_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    METER_ID NUMBER NOT NULL,
    READING_DATE DATE NOT NULL,
    VOLUME_M3 NUMBER(12,3) NOT NULL,
    PRESSURE_BAR NUMBER(5,2),
    FLOW_RATE_M3_H NUMBER(8,3),
    TEMPERATURE_C NUMBER(5,2),
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (METER_ID) REFERENCES WATER_METERS(METER_ID)
);

-- Billing
CREATE OR REPLACE TABLE BILLING (
    BILL_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    BILLING_MONTH DATE NOT NULL, -- First day of billing month
    USAGE_VOLUME_M3 NUMBER(12,3) NOT NULL,
    BASE_RATE_SAR NUMBER(8,2),
    USAGE_CHARGE_SAR NUMBER(10,2) NOT NULL,
    SERVICE_FEE_SAR NUMBER(8,2) DEFAULT 50.00,
    TOTAL_AMOUNT_SAR NUMBER(10,2) NOT NULL,
    DUE_DATE DATE NOT NULL,
    BILL_STATUS VARCHAR(20) DEFAULT 'PENDING', -- PENDING, PAID, OVERDUE
    GENERATED_DATE DATE DEFAULT CURRENT_DATE(),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

-- Payments
CREATE OR REPLACE TABLE PAYMENTS (
    PAYMENT_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    BILL_ID NUMBER NOT NULL,
    PAYMENT_DATE DATE NOT NULL,
    AMOUNT_PAID_SAR NUMBER(10,2) NOT NULL,
    PAYMENT_METHOD VARCHAR(50), -- BANK_TRANSFER, CASH, ONLINE, CHECK
    TRANSACTION_REFERENCE VARCHAR(100),
    PAYMENT_STATUS VARCHAR(20) DEFAULT 'COMPLETED',
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (BILL_ID) REFERENCES BILLING(BILL_ID)
);

-- Weather Data (For ML Predictions)
CREATE OR REPLACE TABLE WEATHER_DATA (
    WEATHER_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    REGION_ID NUMBER NOT NULL,
    WEATHER_DATE DATE NOT NULL,
    TEMPERATURE_MAX_C NUMBER(5,2),
    TEMPERATURE_MIN_C NUMBER(5,2),
    TEMPERATURE_AVG_C NUMBER(5,2),
    RAINFALL_MM NUMBER(6,2) DEFAULT 0,
    HUMIDITY_PERCENT NUMBER(5,2),
    WIND_SPEED_KMH NUMBER(5,2),
    CREATED_DATE DATE DEFAULT CURRENT_DATE(),
    FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID)
);

-- ============================================================================
-- 5. CREATE VIEWS FOR ANALYTICS
-- ============================================================================

-- View: Customer Summary with Payment Status
CREATE OR REPLACE VIEW CUSTOMER_SUMMARY AS
SELECT 
    c.CUSTOMER_ID,
    c.CUSTOMER_NAME,
    c.CUSTOMER_TYPE,
    r.REGION_NAME,
    c.FARM_SIZE_HECTARES,
    c.CROP_TYPE,
    c.ACCOUNT_STATUS,
    COUNT(DISTINCT b.BILL_ID) AS TOTAL_BILLS,
    SUM(b.TOTAL_AMOUNT_SAR) AS TOTAL_BILLED_SAR,
    SUM(CASE WHEN b.BILL_STATUS = 'PAID' THEN b.TOTAL_AMOUNT_SAR ELSE 0 END) AS TOTAL_PAID_SAR,
    SUM(CASE WHEN b.BILL_STATUS IN ('PENDING', 'OVERDUE') THEN b.TOTAL_AMOUNT_SAR ELSE 0 END) AS OUTSTANDING_BALANCE_SAR,
    COUNT(CASE WHEN b.BILL_STATUS = 'OVERDUE' THEN 1 END) AS OVERDUE_BILLS_COUNT
FROM CUSTOMERS c
LEFT JOIN REGIONS r ON c.REGION_ID = r.REGION_ID
LEFT JOIN BILLING b ON c.CUSTOMER_ID = b.CUSTOMER_ID
GROUP BY c.CUSTOMER_ID, c.CUSTOMER_NAME, c.CUSTOMER_TYPE, r.REGION_NAME, 
         c.FARM_SIZE_HECTARES, c.CROP_TYPE, c.ACCOUNT_STATUS;

-- View: Regional Water Resource Status
CREATE OR REPLACE VIEW REGIONAL_WATER_STATUS AS
SELECT 
    r.REGION_ID,
    r.REGION_NAME,
    COUNT(DISTINCT ws.SOURCE_ID) AS TOTAL_SOURCES,
    SUM(ws.CAPACITY_M3) AS TOTAL_CAPACITY_M3,
    SUM(ws.CURRENT_LEVEL_M3) AS CURRENT_LEVEL_M3,
    ROUND((SUM(ws.CURRENT_LEVEL_M3) / NULLIF(SUM(ws.CAPACITY_M3), 0)) * 100, 2) AS CAPACITY_UTILIZATION_PERCENT,
    AVG(ws.EFFICIENCY_PERCENT) AS AVG_EFFICIENCY_PERCENT,
    COUNT(CASE WHEN ws.STATUS = 'ACTIVE' THEN 1 END) AS ACTIVE_SOURCES,
    COUNT(DISTINCT c.CUSTOMER_ID) AS TOTAL_CUSTOMERS
FROM REGIONS r
LEFT JOIN WATER_SOURCES ws ON r.REGION_ID = ws.REGION_ID
LEFT JOIN CUSTOMERS c ON r.REGION_ID = c.REGION_ID
GROUP BY r.REGION_ID, r.REGION_NAME;

-- View: Monthly Usage Trends
CREATE OR REPLACE VIEW MONTHLY_USAGE_TRENDS AS
SELECT 
    DATE_TRUNC('MONTH', wu.READING_DATE) AS MONTH,
    r.REGION_NAME,
    c.CUSTOMER_TYPE,
    COUNT(DISTINCT wu.METER_ID) AS ACTIVE_METERS,
    SUM(wu.VOLUME_M3) AS TOTAL_USAGE_M3,
    AVG(wu.VOLUME_M3) AS AVG_DAILY_USAGE_M3,
    MAX(wu.VOLUME_M3) AS MAX_DAILY_USAGE_M3
FROM WATER_USAGE wu
JOIN WATER_METERS wm ON wu.METER_ID = wm.METER_ID
JOIN CUSTOMERS c ON wm.CUSTOMER_ID = c.CUSTOMER_ID
JOIN REGIONS r ON c.REGION_ID = r.REGION_ID
GROUP BY DATE_TRUNC('MONTH', wu.READING_DATE), r.REGION_NAME, c.CUSTOMER_TYPE;

-- ============================================================================
-- 6. CREATE STAGE FOR SEMANTIC MODELS
-- ============================================================================

USE SCHEMA SEMANTIC_MODELS;

-- CRITICAL: Enable DIRECTORY for Snowsight UI visibility
CREATE STAGE IF NOT EXISTS SEMANTIC_MODEL_STAGE
    DIRECTORY = (ENABLE = TRUE)
    COMMENT = 'Stage for SIO semantic model YAML files';

-- ============================================================================
-- 7. GRANT PERMISSIONS
-- ============================================================================

GRANT USAGE ON DATABASE SIO_DB TO ROLE ACCOUNTADMIN;
GRANT USAGE ON ALL SCHEMAS IN DATABASE SIO_DB TO ROLE ACCOUNTADMIN;
GRANT ALL ON ALL TABLES IN SCHEMA SIO_DB.DATA TO ROLE ACCOUNTADMIN;
GRANT ALL ON ALL VIEWS IN SCHEMA SIO_DB.DATA TO ROLE ACCOUNTADMIN;
GRANT ALL ON ALL STAGES IN SCHEMA SIO_DB.SEMANTIC_MODELS TO ROLE ACCOUNTADMIN;
GRANT USAGE ON WAREHOUSE SIO_MED_WH TO ROLE ACCOUNTADMIN;

-- ============================================================================
-- 8. VERIFICATION
-- ============================================================================

SELECT 'Database setup completed successfully!' AS STATUS;

-- Verify objects created
SELECT 'Tables created:' AS INFO, COUNT(*) AS COUNT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'DATA' AND TABLE_TYPE = 'BASE TABLE';
SELECT 'Views created:' AS INFO, COUNT(*) AS COUNT FROM INFORMATION_SCHEMA.VIEWS WHERE TABLE_SCHEMA = 'DATA';
SELECT 'Warehouse status:' AS INFO, WAREHOUSE_NAME, STATE FROM INFORMATION_SCHEMA.WAREHOUSES WHERE WAREHOUSE_NAME = 'SIO_MED_WH';

